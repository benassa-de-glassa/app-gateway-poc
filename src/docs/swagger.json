{
  "openapi": "3.1.0",
  "info": {
    "title": "Sample Service - OpenAPI Documentation 3.1",
    "description": "This is a sample API based on the OpenAPI 3.1 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the resource store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-resourcetore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-resourcetore/blob/master/src/main/resources/openapi.yaml)",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.11"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "https://sample-service.saas.io"
    }
  ],
  "tags": [
    {
      "name": "resource",
      "description": "Everything about your Resource",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    }
  ],
  "paths": {
    "/resource": {
      "get": {
        "tags": ["resource"],
        "summary": "Query the resource",
        "description": "Query resources using the scim query language",
        "operationId": "queryResource",

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "sample_service_auth": ["read:resource"]
          }
        ]
      },
      "post": {
        "tags": ["resource"],
        "summary": "Add a new resource",
        "description": "Add a new resource",
        "operationId": "addResource",
        "requestBody": {
          "description": "Create a new resource",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Resource"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Unprocessable Content"
          }
        },
        "security": [
          {
            "sample_service_auth": ["write:resource", "read:resource"]
          }
        ]
      }
    },
    "/resource/{resourceId}": {
      "get": {
        "tags": ["resource"],
        "summary": "Find resource by id",
        "description": "Returns a single resource",
        "operationId": "getResourceById",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "ID of resource to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Unprocessable Content"
          }
        },
        "security": [
          {
            "sample_service_auth": ["write:resource", "read:resource"]
          }
        ]
      },

      "put": {
        "tags": ["resource"],
        "summary": "Updates a resource in the store with form data",
        "description": "",
        "operationId": "setPet",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "ID of resource that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of resource that needs to be updated",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of resource that needs to be updated",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Unprocessable Content"
          }
        },
        "security": [
          {
            "sample_service_auth": ["write:resource", "read:resource"]
          }
        ]
      },
      "patch": {
        "tags": ["resource"],
        "summary": "Updates a resource in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "ID of resource that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of resource that needs to be updated",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of resource that needs to be updated",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Unprocessable Content"
          }
        },
        "security": [
          {
            "sample_service_auth": ["write:resource", "read:resource"]
          }
        ]
      },
      "delete": {
        "tags": ["resource"],
        "summary": "Deletes a resource",
        "description": "delete a resource",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourceId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "security": [
          {
            "sample_service_auth": ["write:resource", "read:resource"]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "examples": [10]
          },
          "resourceId": {
            "type": "integer",
            "format": "int64",
            "examples": [198772]
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "examples": [7]
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "examples": ["approved"],
            "enum": ["placed", "approved", "delivered"]
          },
          "complete": {
            "type": "boolean"
          }
        },
        "xml": {
          "name": "order"
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "examples": [100000]
          },
          "username": {
            "type": "string",
            "examples": ["fehguy"]
          },
          "address": {
            "type": "array",
            "xml": {
              "name": "addresses",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          }
        },
        "xml": {
          "name": "customer"
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "examples": ["437 Lytton"]
          },
          "city": {
            "type": "string",
            "examples": ["Palo Alto"]
          },
          "state": {
            "type": "string",
            "examples": ["CA"]
          },
          "zip": {
            "type": "string",
            "examples": ["94301"]
          }
        },
        "xml": {
          "name": "address"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "examples": [1]
          },
          "name": {
            "type": "string",
            "examples": ["Dogs"]
          }
        },
        "xml": {
          "name": "category"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "examples": [10]
          },
          "username": {
            "type": "string",
            "examples": ["theUser"]
          },
          "firstName": {
            "type": "string",
            "examples": ["John"]
          },
          "lastName": {
            "type": "string",
            "examples": ["James"]
          },
          "email": {
            "type": "string",
            "examples": ["john@email.com"]
          },
          "password": {
            "type": "string",
            "examples": ["12345"]
          },
          "phone": {
            "type": "string",
            "examples": ["12345"]
          },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32",
            "examples": [1]
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "tag"
        }
      },
      "Resource": {
        "required": ["name", "photoUrls"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "examples": [10]
          },
          "name": {
            "type": "string",
            "examples": ["doggie"]
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "photoUrl"
              }
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "resource status in the store",
            "enum": ["available", "pending", "sold"]
          }
        },
        "xml": {
          "name": "resource"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "xml": {
          "name": "##default"
        }
      }
    },
    "requestBodies": {
      "Pet": {
        "description": "Pet object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Resource"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Resource"
            }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "sample_service_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://resourcetore3.swagger.io/oauth/authorize",
            "scopes": {
              "write:resource": "modify resource in your account",
              "read:resource": "read your resource"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}
